package com.test4s.gdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.test4s.gdb.Adverts;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ADVERTS.
*/
public class AdvertsDao extends AbstractDao<Adverts, Long> {

    public static final String TABLENAME = "ADVERTS";

    /**
     * Properties of entity Adverts.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Advert_pic = new Property(1, String.class, "advert_pic", false, "ADVERT_PIC");
        public final static Property Advert_name = new Property(2, String.class, "advert_name", false, "ADVERT_NAME");
        public final static Property Advert_url = new Property(3, String.class, "advert_url", false, "ADVERT_URL");
    };


    public AdvertsDao(DaoConfig config) {
        super(config);
    }
    
    public AdvertsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ADVERTS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ADVERT_PIC' TEXT," + // 1: advert_pic
                "'ADVERT_NAME' TEXT," + // 2: advert_name
                "'ADVERT_URL' TEXT);"); // 3: advert_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ADVERTS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Adverts entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String advert_pic = entity.getAdvert_pic();
        if (advert_pic != null) {
            stmt.bindString(2, advert_pic);
        }
 
        String advert_name = entity.getAdvert_name();
        if (advert_name != null) {
            stmt.bindString(3, advert_name);
        }
 
        String advert_url = entity.getAdvert_url();
        if (advert_url != null) {
            stmt.bindString(4, advert_url);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Adverts readEntity(Cursor cursor, int offset) {
        Adverts entity = new Adverts( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // advert_pic
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // advert_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // advert_url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Adverts entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAdvert_pic(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAdvert_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAdvert_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Adverts entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Adverts entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
